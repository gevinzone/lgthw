// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: blog.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogAdminClient is the client API for BlogAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogAdminClient interface {
	GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Blog, error)
	CreateArticle(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*Blog, error)
	UpdateArticle(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*Blog, error)
	DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
}

type blogAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogAdminClient(cc grpc.ClientConnInterface) BlogAdminClient {
	return &blogAdminClient{cc}
}

func (c *blogAdminClient) GetArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogAdmin/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogAdminClient) CreateArticle(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogAdmin/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogAdminClient) UpdateArticle(ctx context.Context, in *BlogRequest, opts ...grpc.CallOption) (*Blog, error) {
	out := new(Blog)
	err := c.cc.Invoke(ctx, "/blog.BlogAdmin/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogAdminClient) DeleteArticle(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/blog.BlogAdmin/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogAdminServer is the server API for BlogAdmin service.
// All implementations must embed UnimplementedBlogAdminServer
// for forward compatibility
type BlogAdminServer interface {
	GetArticle(context.Context, *Id) (*Blog, error)
	CreateArticle(context.Context, *BlogRequest) (*Blog, error)
	UpdateArticle(context.Context, *BlogRequest) (*Blog, error)
	DeleteArticle(context.Context, *Id) (*Response, error)
	mustEmbedUnimplementedBlogAdminServer()
}

// UnimplementedBlogAdminServer must be embedded to have forward compatible implementations.
type UnimplementedBlogAdminServer struct {
}

func (UnimplementedBlogAdminServer) GetArticle(context.Context, *Id) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedBlogAdminServer) CreateArticle(context.Context, *BlogRequest) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedBlogAdminServer) UpdateArticle(context.Context, *BlogRequest) (*Blog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedBlogAdminServer) DeleteArticle(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedBlogAdminServer) mustEmbedUnimplementedBlogAdminServer() {}

// UnsafeBlogAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogAdminServer will
// result in compilation errors.
type UnsafeBlogAdminServer interface {
	mustEmbedUnimplementedBlogAdminServer()
}

func RegisterBlogAdminServer(s grpc.ServiceRegistrar, srv BlogAdminServer) {
	s.RegisterService(&BlogAdmin_ServiceDesc, srv)
}

func _BlogAdmin_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogAdminServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogAdmin/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogAdminServer).GetArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogAdmin_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogAdminServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogAdmin/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogAdminServer).CreateArticle(ctx, req.(*BlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogAdmin_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogAdminServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogAdmin/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogAdminServer).UpdateArticle(ctx, req.(*BlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogAdmin_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogAdminServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog.BlogAdmin/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogAdminServer).DeleteArticle(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogAdmin_ServiceDesc is the grpc.ServiceDesc for BlogAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.BlogAdmin",
	HandlerType: (*BlogAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _BlogAdmin_GetArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _BlogAdmin_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _BlogAdmin_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _BlogAdmin_DeleteArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
